#!/usr/bin/env python3
import argparse
import pandas as pd
import numpy as np
from crop_classification.utils import read_data, softmax


def main(args):
    alpha = 0.1
    batch_size = 64
    decay = 0.1

    X_tr, X_te, Y_tr, Y_te = read_data()

    X_tr = X_tr[X_tr.shape[0] // 5 :]
    X_val = X_tr[: X_tr.shape[0] // 5]
    Y_tr = Y_tr[Y_tr.shape[0] // 5 :]
    Y_val = Y_tr[: Y_tr.shape[0] // 5]

    N_train = X_tr.shape[0]
    N_val = X_val.shape[0]

    w = np.zeros([X_tr.shape[1], 7])

    train_losses = []
    valid_accs = []

    W_best = None
    acc_best = 0
    epoch_best = 0

    for epoch in range(100):
        lr = alpha * 0.8**epoch
        loss_this_epoch = 0

        for b in range(int(np.ceil(N_train / batch_size))):
            X_batch = X_tr[b * batch_size : (b + 1) * batch_size]
            y_batch = Y_tr[b * batch_size : (b + 1) * batch_size]

            y_hat, t_hat, loss_batch, acc = softmax(X_batch, w, y_batch)
            loss_this_epoch += loss_batch

            t_onehot = np.eye(7)[y_batch.T[0]]
            gradient = np.dot(X_batch.T, y_hat - t_onehot)

            w = w - (gradient + decay * w) * lr

        loss_this_epoch /= N_train
        val_y_hat, t_hat, val_loss, val_acc = softmax(X_val, w, Y_val)
        train_losses.append(loss_this_epoch)
        valid_accs.append(val_acc)

        if val_acc > acc_best:
            acc_best = val_acc
            epoch_best = epoch
            W_best = w
            print(f"Update at epoch {epoch+1}: {acc_best}")

    _, t_pred, _, acc_test = softmax(X_te, W_best, Y_te)
    print(f"Test accuracy: {acc_test}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Input file name",
    )

    args = parser.parse_args()

    main(args)
